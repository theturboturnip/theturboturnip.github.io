#!/usr/bin/env python
# ^ requires python3.8+ for dataclasses

import argparse
import json
from datetime import date
import re

def parse_and_format_date(datestr):
    match = re.match(r"^(\d{4})$", datestr)
    if match:
        year = int(match.group(1))
        return datestr
    match = re.match(r"^(\d{4})-(\d{1,2})$", datestr)
    if match:
        year = int(match.group(1))
        month = int(match.group(2))
        return date(year, month, day=1).strftime('%B %Y')
    try:
        return date.fromisoformat(datestr).strftime('%B %Y')
    except ValueError:
        return datestr

def block_date(block):
    if 'startDate' in block and block['startDate']:
        if 'endDate' in block and block['endDate']:
            s = parse_and_format_date(block['startDate'])
            e = parse_and_format_date(block['endDate'])
            return f"{s} - {e}"
        else:
            s = parse_and_format_date(block['startDate'])
            return f"{s} - Present"
    elif 'dateText' in block and block['dateText']:
        return block['dateText']
    return ""

def block_header(block, name_key):
    if 'url' in block and block['url']:
        return f"[{block[name_key]}]({block['url']})"
    return block[name_key]

def as_item(data: str):
    return "* " + data.replace("\n", "\n  ")

if __name__ == '__main__':
    parser = argparse.ArgumentParser("rendermarkdown")
    parser.add_argument("input", type=str)
    parser.add_argument("out", type=str)
    parser.add_argument("--include_basics", action="store_true")
    parser.add_argument("--include_name", action="store_true")

    args = parser.parse_args()

    with open(args.input, "r") as f:
        data = json.loads(f.read())

    with open(args.out, "w") as f:
        f.write("<!-- Generated by rendermarkdown.py -->\n\n")
        if args.include_basics:
            basics = data['basics']
            if args.include_name:
                f.write(f"# {basics['name']}\n")
            f.write(f"\n{basics['label']}\n")
            f.write(f"\n{basics['nationality']}\n")
            f.write(f"\n{basics['location']['formatAddress']}\n")
            f.write(f"\nEmail: [{basics['email']}](mailto:{basics['email']})\n")
            f.write(f"\nWebsite: <{basics['url']}>\n\n")
        f.write(f"## Education\n")
        for block in data['education']:
            f.write(f"### {block['studyType']} in {block['area']} - {block_header(block, 'institution')}\n")
            f.write(f"\n{block_date(block)}\n")
            # f.write(f"\n{block['area']}")
            if 'score' in block:
                f.write(f"\n{block['score']}\n")
            if 'highlights' in block:
                for highlight in block['highlights']:
                    f.write(f"\n{as_item(highlight)}\n")
            if 'courses' in block:
                for c in block['courses']:
                    f.write(f"\n{as_item(c)}\n")
            f.write("\n\n")
        f.write(f"## Work\n")
        for block in data['work']:
            f.write(f"### {block['position']} - {block_header(block, 'company')}\n")
            f.write(f"\n{block_date(block)}\n")
            f.write(f"\n{block['summary']}\n")
            if 'highlights' in block:
                for highlight in block['highlights']:
                    f.write(f"\n{as_item(highlight)}\n")
            f.write("\n\n")
        f.write(f"## Projects\n")
        for block in data['projects']:
            f.write(f"### {block_header(block, 'name')}\n")
            f.write(f"\n{block_date(block)}\n")
            f.write(f"\n{block['description']}\n")
            if 'highlights' in block:
                for highlight in block['highlights']:
                    f.write(f"\n{as_item(highlight)}\n")
            f.write("\n\n")
